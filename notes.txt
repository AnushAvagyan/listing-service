NOTES 4/27 - Fixing Data Flow in Client
- Add listingFeatures to App state. Should filter for only the features that have a value of true in the listingData object, under both keyAmenities and allAmenities.
- Collections of properties in the Mongo model should be arrays of objects rather than strictly nested objects literal.
- Destructure props in each component to include only relevant properties from the listingData and featuresData objects.

Dang it, I need to add another component: the Feature component.
 - need a template for rendering the icon, title and description














If the server has a route '/:id', it can just res.send the index.html file. The browser URL will still contain `id` after the slash.

Then the index.jsx file can parse the id value and pass it as props to the App component. <App listingId={function that gets id} />

The App component sends a GET request to /listings/:id, stores the response data as state.listingData, and then renders child components:

App
state: {
  listingData: {result of GET request}
}

etc.

SO:
DONE 1. Write new server endpoint that serves index.html to dynamic url
DONE 2. Write another endpoint that sends all features data
DONE 3. Add function to index.jsx that gets the id parameter value and passes it to the App component

DONE: HELP DESK: Why is bundle.js not loading when index.html is served from server api??


NEXT: Add 'Access-Control-Allow-Origin' header to server responses
Access to XMLHttpRequest at 'http://localhost:3005/listings/1005' from origin 'https://localhost:8080' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
